#!/usr/bin/perl -w
###############################################################################
# vim:sw=4:
#
# gdb integration for vim
# 
# Authors: Thomas Zellerin
#          TS Urban
#          Markus Kremer <Markus.Kremer@gmx.de>
#
# Features:
# - autostart vim
# - autocreate pipe
# - input from pipe and tty
# - command history
# - easy keymappings
# - works from any directory
#
###############################################################################
#
# todo:
#
# - any suggestions ?
#
#
###############################################################################
#
# History:
#
# 09/05/01 Markus  seems to work with pipes, history and ctrl c 
#
#

use POSIX qw(tmpnam);
use Term::ReadLine; # used in input_tty
use English;
use Getopt::Long;
use Config;

use strict;
use warnings;

# You may want to change these
my $DEBUGGER="gdb"; # Index to description of debuggers below
my $VIMNAME="GVIM"; # name of vim server
my $VIMBINARY="/usr/bin/vim"; # Path to vim binary

my ($server, $help, $gdb_pid, $input_tty_pid, $input_pipe_pid, $term, $worker_pid);
# process arguments# {{{
# This is put before debuggers section, as we may use the rest of arguments as
# arguments for debugger, and these should not be included
#
my $result = GetOptions (
	'server=s'		=> \$server,
	'help!'			=> \$help
);
# }}}
# Debugger descriptions section # {{{
# If you want to introduce a new debugger, store its description here.
my (%DBG_PROMPT, %DBG_BINARY, %DBG_PARAMS, %DBG_RULES);
# cgdb# {{{
$DBG_PROMPT{"cgdb"}="^\(cgdb_cli\)";
$DBG_BINARY{"cgdb"}="/home/tools/release/linux/latest/bin/cgdb-CLI";
$DBG_PARAMS{"cgdb"}=[ "" ];
$DBG_RULES{"cgdb"}={
		'Breakpoint ([0-9]+) at 0x.*: file ([^,]+), line ([0-9]+).' => 'Gdb_Bpt($1,\\\"$2\\\",$3)',
		'Breakpoint ([0-9]+), 0x.*at ([^,]+):([0-9]+)' => 'Gdb_CurrFileLine(\\\"$2\\\",$3)',
		'^\s*0x.*\s+at\s+(\S+):([0-9]+)' => 'Gdb_CurrFileLine(\\\"$1\\\",$2)',
		'\032\032([^:]*):([0-9]+).*' => 'Gdb_CurrFileLine(\\\"$1\\\", $2)',
		'^\s*0x\S+\s*([0-9]+)\s+.*' => 'Gdb_CurrFileLine(0, $1)',
	    };# }}}
# gdb# {{{
$DBG_PROMPT{"gdb"}='^\(gdb\)';
$DBG_BINARY{"gdb"}='gdb';
$DBG_PARAMS{"gdb"}=[ "-f", @ARGV ];
$DBG_RULES{"gdb"}=sub {# {{{
    if (
	s/Breakpoint ([0-9]+) at 0x.*: file ([^,]+), line ([0-9]+)./Gdb_Bpt($1,\\\"$2\\\",$3)/ ||
	s/Breakpoint ([0-9]+), 0x.*at ([^,]+):([0-9]+)/Gdb_CurrFileLine(\\\"$2\\\",$3)/ ||
	s/\032\032([^:]*):([0-9]+).*/Gdb_CurrFileLine(\\\"$1\\\", $2)/ ||
	s/^Program exited with code .*/Gdb_ProgramExited()/
    ) {return 1;}
    return 0; 
};# }}}
# }}}# }}}
my $PIPE=tmpnam(); # name of communication pipe, chmod 600

# atexit handler
END { { unlink ($PIPE) or die "unlink $PIPE: $!"; }}

print @ARGV, "\n";

## unknown option or help asked for
if (!$result || $help) # {{{
{
	help ();
	exit 1;
} # }}}

$VIMNAME=$server if(defined($server));

my $runnings=`$VIMBINARY -u NONE -U NONE --serverlist`; # all running vim servers
if(not ($runnings=~/^$VIMNAME$/im)) # test if server is not already there
{
    # start gvim server
    $result = system ("$VIMBINARY --servername $VIMNAME");
    if ($result != 0)
    {
        die "error starting gvim server: $!";
    }
};

# create fifo - some systems have mkfifo and some mknod
if (system ("mkfifo -m 600 $PIPE") && system ("mknod -m 600 $PIPE p"))
{
    die "couldn't create fifo: $!";
}

$SIG{INT}=\&sig_gdb; # disable CTRL-C

prepare_streams();
create_processes();
worker();
kill(15, $gdb_pid,$input_pipe_pid,$input_tty_pid);
while(wait()!=-1) # wait for dying children
{
   ;
};
exit;

###############################################################################
#
# functions
#
###############################################################################

# sub input_tty - read from stdin and output to gdb {{{
sub input_tty
{
$term=new Term::ReadLine 'GDBVIM';
    while(<RL_RDR>)
    {
        if(defined($_=$term->readline("")))
        {
            print GDB_WTR "$_\n";
        };
    };
}; # }}}
# sub input_pipe - read from a pipe and output to gdb {{{
sub input_pipe
{
    while(1)
    {
        open(IN,"<$PIPE") or die "opening $PIPE failed";
        while(<IN>)
        {
	    print "$_"; # As from input
            print GDB_WTR $_;
        };
        close IN;
    }
    die "should have never been reached !!!";
}; # }}}
# sub prepare_streams {{{
sub prepare_streams()
{
    pipe(WORKER_RDR, GDB_WTR);  # setup pipes for communication
    pipe(GDB_RDR, WORKER_WTR); #
    pipe(RL_RDR, RL_WTR); #
    select(GDB_WTR);    $OUTPUT_AUTOFLUSH = 1; # make unbuffered
    select(WORKER_WTR); $OUTPUT_AUTOFLUSH = 1; # make unbuffered
    select(RL_WTR);     $OUTPUT_AUTOFLUSH = 1; # make unbuffered
    select(STDOUT);     $OUTPUT_AUTOFLUSH = 1; # make unbuffered
}
# }}}
# sub create_processes {{{
sub create_processes()
{
    die "cannot fork" unless(defined($gdb_pid=fork)); # is there a better way for this line?

    if($gdb_pid==0)
    {
	close GDB_RDR; close GDB_WTR; # gdb does not need them
	open(STDOUT, ">&WORKER_WTR") || die "Can't redirect stdout";
	open(STDIN, "<&WORKER_RDR")  || die "Can't redirect stdin";
	gdb();
    }

    close WORKER_RDR; close WORKER_WTR; # we do not need them any more


    die "cannot fork" unless(defined( $input_tty_pid=fork ));
    input_tty() if ($input_tty_pid==0);
    die "cannot fork" unless(defined( $input_pipe_pid=fork ));
    input_pipe() if ($input_pipe_pid==0);

    $worker_pid=$PID;
} 
# }}}
# sub worker - this function processes the gdb output, prints it and sends vim commands # {{{
sub worker
{
    my $PROMPT=$DBG_PROMPT{$DEBUGGER};
    vim_call('Gdb_interf_init(\"'.$PIPE.'\", \"'.$ENV{"PWD"}.'\")');
    print GDB_WTR "set prompt (gdb)\\n\n";
    while (<GDB_RDR>){
        if (/$PROMPT/) 
        {
            print RL_WTR "READ\n";
            print "(gdbvim) ";
        }
        else {
		my $stuff = $_;
		if (&{$DBG_RULES{$DEBUGGER}}){
			chomp;
			vim_call($_);
		}
		print $stuff;
		chomp $stuff;
		$stuff =~ s/"/'/g;
		vim_call("Gdb_Console(\\\"$stuff\\\", 0)");
	}
    }
    vim_call("Gdb_interf_close()");
    close GDB_RDR; close GDB_WTR;
}; # }}}
# sub gdb - this function execs gdb with the supplied parameters # {{{
sub gdb
{
    exec($DBG_BINARY{$DEBUGGER}, @{$DBG_PARAMS{$DEBUGGER}}) or die "exec failed";
};
# }}}
# sub vim_call <vim function to call> - this function calls a remote vim function# {{{
# Do not delete the <C-L> at the end, it is needed when the call is long (two
# or more lines), at least in some versions of vim 
sub vim_call
{
    my $arg=shift||return;
    system("$VIMBINARY --servername $VIMNAME -u NONE -U NONE --remote-send \"<C-\\\\><C-N>:call $arg<CR><C-L>\"");
};
# }}}
# sub sig_gdb - send a CTRL_C to the debugged program {{{
sub sig_gdb
{
    my $child_pid;
    return unless(defined $worker_pid); #
    return unless($PID eq $worker_pid); # only worker will send the signal
    $child_pid=`ps -e -o pid,ppid|grep $gdb_pid\$|cut -c 1-6`;
    print "interrupting $child_pid\n";

    system("kill -SIGINT ".$child_pid);
}; # }}}
# sub help - print help information {{{
sub help
{
    print <<END;
$0 [--server=NAME] [gdb options ...]
END
exit 1;
}; # }}}
# vim: set foldmethod=marker commentstring=#\ %s:
